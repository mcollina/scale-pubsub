doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title Building a Scalable Pub/Sub System with UpRing

    link(rel='stylesheet', type='text/css', href='build/build.css')

  body

    article

      section(data-bespoke-backdrop='black').trans
        div(style='text-align: left; margin-top: -2em; color: white')
          h1 Building a Scalable Pub/Sub System with UpRing
          div(style="width: 50%; float: right; margin-bottom: -50em;")
            a(href="http://nearform.com")
              img(src="./images/nearform.svg")
          h3(style='color: white') by&nbsp;
            a(style="display:inline-block;margin-left: -.03em; color: white",href="http://twitter.com/matteocollina") @matteocollina

      section
        img(src='images/upring.svg' style='width: 90%')

      section
        h2 DEMO KV
        a(href="https://github.com/upringjs/upring-demos") https://github.com/upringjs/upring-demos

      section(data-bespoke-backdrop='baloons').trans
        h2(style='color:white') How can we support
          br
          | live-updates to our users?

      section(data-bespoke-backdrop='foxes').transgray
        h2(style="color: white")
          | How can we know which node handle what connection?

      section
        h2 Divide et Impera
        h3 (Philip of Macedonia)

      section
        h3 Application-Level Sharding
        img(src="./images/reqhashing.png" style="width: 90%")
        // Given a request referencing data X, we must always route it to peer Y.

      section
        h3 How do we assign data to servers?
        img(src='images/sharding.png' style='height: 80%')

      section
        h3 What happens when you read on UpRing?
        img(src="./images/read.png" style="height: 90%")

      section
        h3 What happens when you write on UpRing?
        img(src="./images/write.png" style="height: 90%")

      section
        img(src='images/dynamodb.png' style='width: 90%')

      section
        img(src="./images/dynamo-strategy-one.png" style="height: 90%")

      section
        h2 What if the topology changes?

      section
        h2 Failure detection
        img(src="./images/heartbeat.png" style="width: 90%")
        h2 by heartbeat

      section(data-bespoke-backdrop='books').transgray
        h3(style="color: white") How do we find the new peer?

      section
        h3 What happens when a peer dies?
        img(src="./images/peer-dead.png" style="height: 90%")

      section
        ul(style='text-align: left; font-size: 3em').bullet
          li
            b(style='color: red; font-style: italic;') S
            | calable
          li
            b(style='color: red; font-style: italic;') W
            | eakly-Consistent
          li
            b(style='color: red; font-style: italic;') I
            | nfection Style
          li
            b(style='color: red; font-style: italic;') M
            | embership protocol

      section()
        img(src='images/swim.png' style='width: 90%')

      section(data-bespoke-backdrop='lamp').trans
        h3(style="color: white; margin-left: auto; margin-right: 0%; width: 30%; text-align: right; padding-bottom: 5%")
          | UpRing organizes our peers in a <b>consistent hashring</b>,
          | using <b>SWIM</b> to detect failures

      section(data-bespoke-backdrop='magic').trans

      section
        img(src='images/hashring-sharding.png' style='height: 90%')

      section
        h2 Differences between UpRing and Raft/Paxos
        ul.bullet(style="text-align: left")
          li
            | in UpRing, a leader is staticially decided based on the key
            | so there are multiple leaders
          li in Raft and Paxos, there is a single leader, elected by all the
            | peers

      section
        h2 Differences between UpRing and Raft/Paxos
        ul.bullet(style="text-align: left")
          li
            | in UpRing, the stability of the cluster depends on the gossip
            | convergence, every peer must know who else is available to hash
            | the key
          li
            | in Raft and Paxos, you need at least 3 nodes to operate,
            | but better use 5

      section(data-bespoke-backdrop='megaphone').transgray
        h2(style="color: white; margin-top: -3em;") so... how can we build a pub/sub system with UpRing?

      section
        img(src='images/just-publish.png' style='height: 90%')

      section
        img(src='images/pub-sub.png' style='height: 90%')

      section
        img(src='images/pub-sub-state-change.png' style='height: 90%')

      section
        img(src='images/sub-wildcard.png' style='height: 90%')

      section
        h2 DEMO publish-subscribe
        a(href="https://github.com/upringjs/upring-demos") https://github.com/upringjs/upring-demos

      section
        h3 Upring is a framework to&nbsp;
          b build

        ul.bullet
          li a key value store
          li a cache
          li a pub/sub system
          li real-time applications
          li a discovery system
          li a metadata store for microservices
          li ..or anything that requires distributed state!

      section
        h2 Links
        ul.bullet
          li
            a(href="https://github.com/upringjs/upring").
              https://github.com/upringjs/upring
          li
            a(href="https://github.com/upringjs/upring-kv").
              https://github.com/upringjs/upring-kv
          li
            a(href="https://github.com/upringjs/upring-control").
              https://github.com/upringjs/upring-control
          li
            a(href="https://github.com/upringjs/upring-pubsub").
              https://github.com/upringjs/upring-pubsub

      section
        h2 This presentation
        ul.bullet
          li
            a(href="https://upringjs.github.io/scale-pubsub").
              https://upringjs.github.io/scale-pubsub
          li
            a(href="https://github.com/mcollina/scale-pubsub").
              https://github.com/upringjs/scale-pubsub

      // section
      //   a(href="http://nearform.com" style="width: 80%")
      //     img(src="./images/nearform.svg")
      //   br
      //   h2 We are hiring React developers!
      //   br
      //   h3 <a href="mailto:matteo.collina@nearform.com">matteo.collina@nearform.com</a>

      section
        h1 Thanks!
        a(href="http://nearform.com" style="width: 20%")
          img(src="./images/nearform.svg")
        br
        h3 <a href="mailto:matteo.collina@nearform.com">matteo.collina@nearform.com</a>
        h3 <a href="http://twitter.com/matteocollina">@matteocollina</a>
        h3 <a href="mailto:luca.maraschi@nearform.com">luca.maraschi@nearform.com</a>
        h3 <a href="http://twitter.com/lucamaraschi">@lucamaraschi</a>
        h3 <a href="http://www.nearform.com">www.nearform.com</a>

    script(src='build/build.js')
